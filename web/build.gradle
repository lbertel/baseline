plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group 'io.ps.web'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-ui:1.3.9'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation project(":application")
    implementation project(":domain")
    implementation project(":infrastructure")

}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

bootRun {}

// make sure bootRun is executed when runDev task runs
task runDev(dependsOn:bootRun) {
    gradle.taskGraph.whenReady { graph ->
        logger.lifecycle('>>> Setting spring.profiles.active to dev')
        if (graph.hasTask(runDev)) {
            bootRun {
                args = ["--spring.profiles.active=dev"]
            }
        }
    }
}

// make sure bootRun is executed when runTest task runs
task runTest(dependsOn:bootRun) {
    gradle.taskGraph.whenReady { graph ->
        logger.lifecycle('>>> Setting spring.profiles.active to test')
        if (graph.hasTask(runTest)) {
            bootRun {
                args = ["--spring.profiles.active=test"]
            }
        }
    }
}

// make sure bootRun is executed when runProd task runs
task runProd(dependsOn:bootRun) {
    gradle.taskGraph.whenReady { graph ->
        logger.lifecycle('>>> Setting spring.profiles.active to prod')
        if (graph.hasTask(runProd)) {
            bootRun {
                args = ["--spring.profiles.active=prod"]
            }
        }
    }
}
